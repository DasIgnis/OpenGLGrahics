#pragma once


const char* vsSourceLightingPhong =
	"#version 330\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec2 textureCoord;\n"
	"layout (location = 2) in vec3 normal;\n"
	"uniform struct Transform {\n"
	"	mat4 model;\n"
	"	mat4 viewProjection;\n"
	"	mat3 normal;\n"
	"	vec3 viewPosition;\n"
	"} transform;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"out Vertex {\n"
	"	vec2 texcoord;\n"
	"	vec3 normal;\n"
	"	vec3 lightDir;\n"
	"	vec3 viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"out vec2 TexCoord;\n"
	"void main() {\n"
	"	vec4 vertex   = transform.model * vec4(position, 1.0);\n"
	"	vec4 lightDir = light.position - vertex;\n"
	"	Vert.texcoord = textureCoord;\n"
	"	Vert.normal   = transform.normal * normal;\n"
	"	Vert.lightDir = vec3(lightDir);\n"
	"	Vert.viewDir  = transform.viewPosition - vec3(vertex);\n"
	"	Vert.distance = length(lightDir);\n"
	"	gl_Position = transform.viewProjection * vertex;\n"
	"	TexCoord = textureCoord;\n"
	"}\n";

const char* vsSourceLightingPhongDirection =
	"#version 330\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec2 textureCoord;\n"
	"layout (location = 2) in vec3 normal;\n"
	"uniform struct Transform {\n"
	"	mat4 model;\n"
	"	mat4 viewProjection;\n"
	"	mat3 normal;\n"
	"	vec3 viewPosition;\n"
	"} transform;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"out Vertex {\n"
	"	vec2 texcoord;\n"
	"	vec3 normal;\n"
	"	vec3 lightDir;\n"
	"	vec3 viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"out vec2 TexCoord;\n"
	"void main() {\n"
	"	vec4 vertex   = transform.model * vec4(position, 1.0);\n"
	"	Vert.texcoord = textureCoord;\n"
	"	Vert.normal   = transform.normal * normal;\n"
	"	Vert.lightDir = vec3(light.position);\n"
	"	Vert.viewDir  = transform.viewPosition - vec3(vertex);\n"
	"	gl_Position = transform.viewProjection * vertex;\n"
	"	TexCoord = textureCoord;\n"
	"}\n";

const char* fsSourceLightingPhong =
	"#version 330\n"
	"out vec4 FragColor;\n"
	"in vec2 TexCoord;\n"
	"in Vertex {\n"
	"	vec2  texcoord;\n"
	"	vec3  normal;\n"
	"	vec3  lightDir;\n"
	"	vec3  viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"uniform struct Material {\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec4 emission;\n"
	"	float shininess;\n"
	"} material;\n"
	"uniform sampler2D texture1;\n"
	"void main() {\n"
	"	vec3 normal   = normalize(Vert.normal);\n"
	"	vec3 lightDir = normalize(Vert.lightDir);\n"
	"	vec3 viewDir  = normalize(Vert.viewDir);\n"
	"	float attenuation = 1.0 / (light.attenuation[0] + light.attenuation[1] * Vert.distance + light.attenuation[2] * Vert.distance * Vert.distance);\n"
	"	FragColor = material.emission;\n"
	"	FragColor += material.ambient * light.ambient * attenuation;\n"
	"	float NdotL = max(dot(normal, lightDir), 0.0);\n"
	"	FragColor += material.diffuse * light.diffuse * NdotL * attenuation;\n"
	"	float RdotVpow = max(pow(dot(reflect(-lightDir, normal), viewDir), material.shininess), 0.0);\n"
	"	FragColor += material.specular * light.specular * RdotVpow * attenuation;\n"
	"	FragColor *= texture(texture1, Vert.texcoord);\n"
	"}\n";

const char* fsSourceLightingPhongDirection =
	"#version 330\n"
	"out vec4 FragColor;\n"
	"in vec2 TexCoord;\n"
	"in Vertex {\n"
	"	vec2  texcoord;\n"
	"	vec3  normal;\n"
	"	vec3  lightDir;\n"
	"	vec3  viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"uniform struct Material {\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec4 emission;\n"
	"	float shininess;\n"
	"} material;\n"
	"uniform sampler2D texture1;\n"
	"void main() {\n"
	"	vec3 normal   = normalize(Vert.normal);\n"
	"	vec3 lightDir = normalize(Vert.lightDir);\n"
	"	vec3 viewDir  = normalize(Vert.viewDir);\n"
	"	FragColor = material.emission;\n"
	"	FragColor += material.ambient * light.ambient;\n"
	"	float NdotL = max(dot(normal, lightDir), 0.0);\n"
	"	FragColor += material.diffuse * light.diffuse * NdotL;\n"
	"	float RdotVpow = max(pow(dot(reflect(-lightDir, normal), viewDir), material.shininess), 0.0);\n"
	"	FragColor += material.specular * light.specular * RdotVpow;\n"
	"	FragColor *= texture(texture1, Vert.texcoord);\n"
	"}\n";

const char* vsSourceLightingLambert =
	"#version 330\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec2 textureCoord;\n"
	"layout (location = 2) in vec3 normal;\n"
	"uniform struct Transform {\n"
	"	mat4 model;\n"
	"	mat4 viewProjection;\n"
	"	mat3 normal;\n"
	"	vec3 viewPosition;\n"
	"} transform;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"out vec2 TexCoord;\n"
	"varying vec4 l;\n"
	"varying vec3 n;\n"
	"void main() {\n"
	"	vec4 vertex   = transform.model * vec4(position, 1.0);\n"
	"	vec4 lightDir = light.position - vertex;\n"
	"	l = normalize(lightDir);\n"
	"	n = normalize(transform.normal * normal);\n"
	"	gl_Position = transform.viewProjection * vertex;\n"
	"	TexCoord = textureCoord;\n"
	"}\n";

const char* fsSourceLightingLambert =
	"#version 330\n"
	"varying vec4 l;\n"
	"varying vec3 n;\n"
	"in vec2 TexCoord;\n"
	"uniform sampler2D texture1;\n"
	"void main() {\n"
	"	vec3 n2 = normalize(n);\n"
	"	vec3 l2 = normalize(vec3(l));\n"
	"	vec4 diff = texture(texture1, TexCoord) * max(dot(n2, l2), 0.0);\n"
	"	gl_FragColor = diff;\n"
	"}\n";

const char* vsSourceLightingBlinnPhong =
	"#version 330\n"
	"layout (location = 0) in vec3 position;\n"
	"layout (location = 1) in vec2 textureCoord;\n"
	"layout (location = 2) in vec3 normal;\n"
	"uniform struct Transform {\n"
	"	mat4 model;\n"
	"	mat4 viewProjection;\n"
	"	mat3 normal;\n"
	"	vec3 viewPosition;\n"
	"} transform;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"} light;\n"
	"out Vertex {\n"
	"	vec2 texcoord;\n"
	"	vec3 normal;\n"
	"	vec3 lightDir;\n"
	"	vec3 viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"out vec2 TexCoord;\n"
	"varying vec4 l;\n"
	"varying vec3 n;\n"
	"void main() {\n"
	"	vec4 vertex   = transform.model * vec4(position, 1.0);\n"
	"	vec4 lightDir = light.position - vertex;\n"
	"	l = normalize(lightDir);\n"
	"	n = normalize(transform.normal * normal);\n"
	"	Vert.texcoord = textureCoord;\n"
	"	Vert.normal   = transform.normal * normal;\n"
	"	Vert.lightDir = vec3(light.position);\n"
	"	Vert.viewDir  = transform.viewPosition - vec3(vertex);\n"
	"	gl_Position = transform.viewProjection * vertex;\n"
	"	TexCoord = textureCoord;\n"
	"}\n";

const char* fsSourceLightingBlinnPhong =
	"#version 330\n"
	"out vec4 FragColor;\n"
	"in vec2 TexCoord;\n"
	"in Vertex {\n"
	"	vec2 texcoord;\n"
	"	vec3 normal;\n"
	"	vec3 lightDir;\n"
	"	vec3 viewDir;\n"
	"	float distance;\n"
	"} Vert;\n"
	"uniform struct PointLight {\n"
	"	vec4 position;\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec3 attenuation;\n"
	"	vec4 lightColor;\n"
	"} light;\n"
	"uniform struct Material {\n"
	"	vec4 ambient;\n"
	"	vec4 diffuse;\n"
	"	vec4 specular;\n"
	"	vec4 emission;\n"
	"	float shininess;\n"
	"} material;\n"
	"uniform sampler2D texture1;\n"
	"varying vec4 l;\n"
	"varying vec3 n;\n"
	"void main() {\n"
	"	vec3 normal   = normalize(Vert.normal);\n"
	"	vec3 lightDir = normalize(Vert.lightDir);\n"
	"	vec3 viewDir  = normalize(Vert.viewDir);\n"
	"	vec3 h2 = normalize(lightDir + viewDir);\n"
	"	vec3 n2 = normalize(n);\n"
	"	vec3 l2 = normalize(vec3(l));\n"
	"	vec4 diff = material.diffuse * max ( dot ( n2, l2 ), 0.0 );\n"
	"	vec4 spec = light.lightColor * pow ( max ( dot ( n2, h2 ), 0.0 ), 16 );\n"
	"	FragColor = texture(texture1, TexCoord) * (diff + spec);\n"
	"}\n";